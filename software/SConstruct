# -*- python -*-

import os
import fnmatch
import distutils.spawn
import glob

version = '0.5'

env = Environment(tools = ['default', 'textfile', 'objcopy'])
if not ARGUMENTS.get('VERBOSE'):
    env['CCCOMSTR']   = "Compiling $TARGET"
    env['CXXCOMSTR']  = "Compiling $TARGET"
    env['ASCOMSTR']   = "Compiling $TARGET"
    env['LINKCOMSTR'] = "Linking $TARGET"
    env['SRECCOMSTR'] = "Generating $TARGET"
    env['BINCOMSTR'] = "Generating $TARGET"

MLIBFLAGS = [
    '-mthumb',
    '-march=armv7e-m',
    '-mfloat-abi=hard',
    '-mfpu=fpv4-sp-d16',
]

CCFLAGS = MLIBFLAGS + [
    '-Wall',
    '-ffunction-sections',
    '-fdata-sections',
    '-fno-strict-aliasing',
    '-specs=nano.specs',
    '-fno-exceptions',
]

env.Append(CCFLAGS    = ['-O2', ] + CCFLAGS )

env.Append(ASFLAGS    = MLIBFLAGS)

env.Append(CPPPATH    = [
    'include',
    'stm/Inc',
    'stm/Drivers/CMSIS/Include',
    'stm/Drivers/CMSIS/Device/ST/STM32F3xx/Include',
    'stm/Drivers/STM32F3xx_HAL_Driver/Inc',
    'stm/Middlewares/ST/STM32_USB_Device_Library/Core/Inc',
    'stm/Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc',
])


env.Append(CPPDEFINES = [
    ('VERSION', version),
    'USE_HAL_DRIVER',
    'STM32F302x8',
    ('__weak', '__attribute__\(\(weak\)\)'),
    ('__packed', '__attribute__\(\(__packed__\)\)'),
    'ARM_MATH_CM4',
    'ARM_MATH_MATRIX_CHECK',
    'ARM_MATH_ROUNDING',
    'UNALIGNED_SUPPORT_DISABLE',
    ('__FPU_PRESENT', '1'),
    #'PCBR6',
])

env.Append(LINKFLAGS  = MLIBFLAGS + [
    '-specs=nano.specs',
    '-nostartfiles',
    '-nostdlib',
    '-Wl,-Tflash.ld',
    '-Wl,-Map',
    '-Wl,${TARGET}.map',
    '-Wl,--cref',
    '-Wl,--gc-sections',
])

target_prefix = 'arm-none-eabi-'

# Construct PATH
path = env['ENV'].get('PATH', [])
if not path:
    path = []
else:
    path = path.split(os.pathsep)

tcpath = os.path.dirname(distutils.spawn.find_executable(target_prefix + 'gcc'))
env['ENV']['PATH'] = os.pathsep.join([tcpath] + path)

env['CC'] = target_prefix + 'gcc'
env['CXX'] = target_prefix + 'g++'
env['AS'] = target_prefix + 'as'
env['AR'] = target_prefix + 'ar'
env['RANLIB'] = target_prefix + 'ranlib'
env['LINK'] = target_prefix + 'g++'
env['OBJCOPY'] = target_prefix + 'objcopy'

def find(directories, patterns):
    result = []
    for directory in directories:
        for root, dirnames, filenames in os.walk(directory):
            dirnames.sort()
            filenames.sort()
            fmlist = []
            for pat in patterns:
                fmlist += fnmatch.filter(filenames, pat)
            for filename in fmlist:
                result.append(os.path.join(root, filename))

    return result

srcdirs = [ 'stm/Drivers/CMSIS',
            'stm/Drivers/STM32F3xx_HAL_Driver',
            'stm/Middlewares',
            'stm/Src',
            'include' ]
sources = find(srcdirs, ['*.c', ])
headers = find(srcdirs, ['*.h', ])
sources = [ 'src/startup_stm32f302x8.s'] + sources + [
    'src/newlib_stubs.c',
    'src/uart_dma.c',
    'src/display.c',
    'src/encoder.c',
    'src/pwm.c',
    'src/smsg.c',
    'src/eeprom.c',
    'src/usb.c',
]


defines = []
for d in env['CPPDEFINES']:
    if type(d) == str:
        defines += [d, ]
    else:
        n,v = d
        defines += [n + '=' + v, ]

# Generate config file for qtcreator project
out = ''
for d in env['CPPDEFINES']:
    if type(d) == str:
        out += ('#define %s\n' % (d, ))
    else:
        n,v = d
        out += ('#define %s %s\n' % (n, v.replace('\\', '')))
try:
    f = open('fwrtss.config', 'rb')
    cnf = f.read()
except:
    cnf = ''
f.close()
if cnf != out:
    f = open('fwrtss.config', 'wb')
    f.seek(0,0)
    f.write(out)
    f.close()

# Generate includes file for QtCreator
out = '\n'.join(env['CPPPATH'])
try:
    f = open('fwrtss.includes', 'rb')
    cnf = f.read()
except:
    cnf = ''
f.close()
if cnf != out:
    f = open('fwrtss.includes', 'wb')
    f.seek(0,0)
    f.write(out)
    f.close()

# Generate files file for QtCreator
out = '\n'.join([ 'src/program.c', ] + sources + headers)
try:
    f = open('fwrtss.files', 'rb')
    cnf = f.read()
except:
    cnf = ''
f.close()
if cnf != out:
    f = open('fwrtss.files', 'wb')
    f.seek(0,0)
    f.write(out)
    f.close()


envd = env.Clone()

env.VariantDir('build', '.', duplicate=0)

objects = env.Object([ os.path.join('build', x) for x in sources ])

env.Program('bin/fwrtss',
            [ 'build/src/program.c', objects, ],
            LIBS=['m', 'c_s', ])

env.Srec('bin/fwrtss')
env.Binary('bin/fwrtss')

envd['CCFLAGS'] = ['-O0', '-g' ] + CCFLAGS
envd['ASFLAGS'] = [ '-g', ] + MLIBFLAGS
envd['CPPDEFINES'] += [ 'NO_WDG', ]

envd.VariantDir('buildd', '.', duplicate=0)

objectsd = envd.Object([ os.path.join('buildd', x) for x in sources ])

envd.Program('bin/debug/fwrtss',
             [ 'buildd/src/program.c', objectsd, ],
             LIBS=['m', 'c_s', ])

progsd = [ "bin/debug/fwrtss", ]

for test in glob.glob('tests/*/program.c'):
    src  = os.path.join('buildd', test)
    name = 'bin/debug/test-%s' % (os.path.basename(os.path.dirname(test)), )
    progsd.append(name)
    envd.Program(name,
                 [ src, objectsd, ],
                 LIBS=['m', 'c_s', ])

for prog in progsd:
    envd.Srec(prog)
    envd.Binary(prog)
    envd.Clean(prog, [ prog + '.map', 'buildd' ])


env.Substfile('Doxyfile.in', SUBST_DICT = {
    '@PREDEFINED@'       : ' '.join(defines),
    '@PROJECT_NUMBER@'   : version,
    '@INPUT@'            : ' '.join(srcdirs) + ' src',
    '@OUTPUT_DIRECTORY@' : 'doc',
})

env.Command('doc',
            ['Doxyfile', ] + sources + headers,
            'doxygen < $SOURCE', )

env.Clean ('bin/fwrtss', [ 'bin/fwrtss.map', 'build' ])
env.Clean('doc', 'doc')
